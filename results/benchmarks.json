{
    "bench_imports.TimeSuite.time_hyperspy": {
        "code": "class TimeSuite:\n    def time_hyperspy(self):\n        self.execute('import hyperspy.api')\n\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "bench_imports.TimeSuite.time_hyperspy",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "24b3887ca8f76c61b3d0deea2c24d75e92d609241c61725865df7765216cbc47",
        "warmup_time": -1
    },
    "bench_imports.TimeSuite.time_hyperspy_api_nogui": {
        "code": "class TimeSuite:\n    def time_hyperspy_api_nogui(self):\n       self.execute('import hyperspy.api_nogui')\n\n    def setup(self):\n        pass",
        "min_run_count": 2,
        "name": "bench_imports.TimeSuite.time_hyperspy_api_nogui",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e4bc5fbe47456685f5b66576032f801fa08a99dd0cfbcf883a9cf9eae4132861",
        "warmup_time": -1
    },
    "bench_other.BenchAxesManager.time_axes1": {
        "code": "class BenchAxesManager:\n    def time_axes1(self):\n        \"1D Axes of length 10000\"\n        for i in self.ax1:\n            pass\n\n    def setup(self):\n        self.ax1 = AxesManager(\n            [DataAxis(100*100, navigate=True).get_axis_dictionary(),\n            ])\n        self.ax2 = AxesManager(\n            [DataAxis(100, navigate=True).get_axis_dictionary(),\n            DataAxis(100, navigate=True).get_axis_dictionary()\n            ])",
        "min_run_count": 2,
        "name": "bench_other.BenchAxesManager.time_axes1",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "86267352d53f6c5c9643ae8dd394aa58e9a234f75909713f8be9086878b18bcc",
        "warmup_time": -1
    },
    "bench_other.BenchAxesManager.time_axes2": {
        "code": "class BenchAxesManager:\n    def time_axes2(self):\n        \"2D Axes of length 100x100\"\n        for i in self.ax2:\n            pass\n\n    def setup(self):\n        self.ax1 = AxesManager(\n            [DataAxis(100*100, navigate=True).get_axis_dictionary(),\n            ])\n        self.ax2 = AxesManager(\n            [DataAxis(100, navigate=True).get_axis_dictionary(),\n            DataAxis(100, navigate=True).get_axis_dictionary()\n            ])",
        "min_run_count": 2,
        "name": "bench_other.BenchAxesManager.time_axes2",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2df71300964754e4e1537afb3bca019b705543bbc2bc2f9bcebac43c775a6ed3",
        "warmup_time": -1
    },
    "bench_other.BenchMultiFit.time_multifit": {
        "code": "class BenchMultiFit:\n    def time_multifit(self):\n        \"Fit a gaussian in 600 positions using the default fitter\"\n        self.m.multifit()\n\n    def setup(self):\n        rg = Generator(PCG64(1))\n        G = Gaussian(centre=50, sigma=10)\n        x = np.arange(100)\n        data = G.function(x)\n        nav = Signal2D(rg.random((600,))).T\n        s = Signal1D(data) * nav\n        m = s.create_model()\n        m.append(G)\n        self.m = m",
        "min_run_count": 2,
        "name": "bench_other.BenchMultiFit.time_multifit",
        "number": 0,
        "param_names": [],
        "params": [],
        "processes": 2,
        "repeat": 0,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b8ad6fa6a4af4a53dbf181bc5f15abd2115370be25af491ea5f78fa4ec62fad7",
        "warmup_time": -1
    },
    "version": 2
}